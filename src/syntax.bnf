// Expressions
primary_expression: TK_IDENT+token
                  | TK_CONSTANT+token
                  | TK_STRING+token
                  | "(" expression ")";

postfix_expression: primary_expression
                  | postfix_expression "[" expression "]"
                  | postfix_expression "(" argument_expression_list ")"
                  | postfix_expression "(" ")"
                  | postfix_expression "." TK_IDENT+token
                  | postfix_expression "->" TK_IDENT+token
                  | postfix_expression "++"
                  | postfix_expression "--"
                  | "(" type_name ")" "{" initializer_list "}"
                  | "(" type_name ")" "{" initializer_list "," "}";

argument_expression_list: assignment_expression
                        | argument_expression_list "," assignment_expression;

unary_expression: postfix_expression
                | "++" unary_expression
                | "--" unary_expression
                | unary_operator cast_expression
                | "sizeof" unary_expression
                | "sizeof" "(" type_name ")";

unary_operator: "&"
              | "*"
              | "+"
              | "-"
              | "~"
              | "!";

cast_expression: unary_expression
               | "(" type_name ")" cast_expression;

multiplicative_expression: cast_expression
                         | multiplicative_expression "*" cast_expression
                         | multiplicative_expression "/" cast_expression
                         | multiplicative_expression "%" cast_expression;

additive_expression: multiplicative_expression
                   | additive_expression "+" multiplicative_expression
                   | additive_expression "-" multiplicative_expression;

shift_expression: additive_expression
                | shift_expression "<<" additive_expression
                | shift_expression ">>" additive_expression;

relational_expression: shift_expression
                     | relational_expression "<" shift_expression
                     | relational_expression ">" shift_expression
                     | relational_expression "<=" shift_expression
                     | relational_expression ">=" shift_expression;

equality_expression: relational_expression
                   | equality_expression "==" relational_expression
                   | equality_expression "!=" relational_expression;

AND_expression: equality_expression
              | AND_expression "&" equality_expression;

exclusive_OR_expression: AND_expression
                        | exclusive_OR_expression "^" AND_expression;

inclusive_OR_expression: exclusive_OR_expression
                        | inclusive_OR_expression "|" exclusive_OR_expression;

logical_AND_expression: inclusive_OR_expression
                      | logical_AND_expression "&&" inclusive_OR_expression;
                      
logical_OR_expression: logical_AND_expression
                     | logical_OR_expression "||" logical_AND_expression;

conditional_expression: logical_OR_expression
                      | logical_OR_expression "?" expression ":" conditional_expression;

assignment_expression: conditional_expression
                     | unary_expression assignment_operator assignment_expression;

assignment_operator: "="
                   | "*="
                   | "/="
                   | "%="
                   | "+="
                   | "-="
                   | "<<="
                   | ">>="
                   | "&="
                   | "^="
                   | "|=";

expression: assignment_expression;

constant_expression: conditional_expression;

// Declarations
declaration: declaration_specifiers init_declarator_list ";"
           | declaration_specifiers ";";

declaration_specifiers: storage_class_specifier declaration_specifiers
                      | storage_class_specifier
                      | type_specifier declaration_specifiers
                      | type_specifier
                      | type_qualifier declaration_specifiers
                      | type_qualifier
                      | function_specifier declaration_specifiers
                      | function_specifier;

init_declarator_list: init_declarator
                    | init_declarator_list "," init_declarator;

init_declarator: declarator
               | declarator "=" initializer;

storage_class_specifier: "typedef"
                       | "extern"
                       | "static";

type_specifier: "void"
              | "char"
              | "short"
              | "int"
              | "long"
              | "float"
              | "double"
              | "signed"
              | "unsigned"
              | "bool"
              | struct_or_union_specifier
              | enum_specifier
              | typedef_name;

struct_or_union_specifier: struct_or_union_identifier "{" struct_declaration_list "}"
                         | struct_or_union TK_IDENT+token;

struct_or_union: "struct"
               | "union";

struct_declaration_list: struct_declaration
                       | struct_declaration_list struct_declaration;

struct_declaration: specifier_qualifier_list struct_declarator_list ";";

specifier_qualifier_list: type_specifier specifier_qualifier_list
                        | type_specifier
                        | type_qualifier specifier_qualifier_list
                        | type_qualifier;

struct_declarator_list: struct_declarator
                      | struct_declarator_list "," struct_declarator;

struct_declarator: declarator;

enum_specifier: "enum" TK_IDENT+token "{" enumerator_list "}"
              | "enum" TK_IDENT+token "{"  enumerator_list "," "}"
              | "enum" TK_IDENT+token;

enumerator_list: enumerator
               | enumerator_list "," enumerator;

enumerator: enumeration_constant
          | enumeration_constant "=" constant_expression;

type_qualifier: "const";

function_specifier: "inline";

declarator: pointer direct_declarator
          | direct_declarator;

direct_declarator: TK_IDENT+token
                 | "(" declarator ")"
                 | direct_declarator "[" type_qualifier_list assignment_expression "]"
                 | direct_declarator "[" assignment_expression "]"
                 | direct_declarator "[" type_qualifier_list "]"
                 | direct_declarator "[" "]"
                 | direct_declarator "[" "static" type_qualifier_list assignment_expression "]"
                 | direct_declarator "[" "static" assignment_expression "]"
                 | direct_declarator "[" type_qualifier_list "static" assignment_expression "]"
                 | direct_declarator "[" type_qualifier_list "]"
                 | direct_declarator "[" "]"
                 | direct_declarator "(" perameter_type_list ")"
                 | direct_declarator "(" identifier_list ")"
                 | direct_declarator "(" ")";

pointer: "*" type_qualifier
       | "*"
       | "*" type_qualifier_list pointer
       | "*" pointer;

type_qualifier_list: type_qualifier
                   | type_qualifier_list type_qualifier;

parameter_type_list: parameter_list
                   | parameter_list "," "...";

parameter_list: parameter_declaration
              | parameter_list "," parameter_declaration;

parameter_declaration: declaration_specifiers declarator
                     | declaration_specifiers abstract_declarator
                     | declaration_specifiers;

identifier_list: TK_IDENT+token
               | identifier_list "," TK_IDENT+token;

type_name: specifier_qualifier_list abstract_declarator
         | specifier_qualifier_list;

abstract_declarator: pointer
                   | pointer direct_abstract_declarator
                   | direct_abstract_declarator;

direct_abstract_declarator: "(" abstract_declarator ")"
                          | direct_abstract_declarator "[" assignment_expression "]"
                          | "[" assignment_expression "]"
                          | direct_abstract_declarator "[" "]"
                          | "[" "]"
                          | direct_abstract_declarator "[" "*" "]"
                          | "[" "*" "]"
                          | direct_abstract_declarator "[" parameter_type_list "]"
                          | "[" parameter_type_list "]"
                          | direct_abstract_declarator "[" "]"
                          | "[" "]";

typedef_name: TK_IDENT+token
            | ;

initializer: assignment_expression
           | "{" initializer_list "}"
           | "{" initializer_list "," "}";

initializer_list: designation initializer
                | initializer
                | initializer_list "," designation initializer
                | initializer_list "," initializer;

designation: designator_list "=";

designator_list: designator
               | designator_list designator;

designator: "[" constant_expression "]"
           | "." TK_IDENT+token;

// Statements
statement: labeled_statement
         | compound_statement
         | expression_statement
         | selection_statement
         | iteration_statement
         | jump_statement;

labeled_statement: TK_IDENT+token ":" statement
                 | "case" constant_expression ":" statement
                 | "default" ":" statement;

compound_statement: "{" block_item_list "}"
                  | "{" "}";

block_item_list: block_item
               | block_item_list block_item;

block_item: declaration
          | statement;

expression_statement: expression ";"
                    | ";";

selection_statement: "if" "(" expression ")" statement
                   | "if" "(" expression ")" statement "else" statement
                   | "switch" "(" expression ")" statement;

iteration_statement: "while" "(" expression ")" statement
                   | "do" statement "while" "(" expression ")"
                   | "for" "(" expression ";" expression ";" expression ")" statement
                   | "for" "(" expression ";" expression ";"            ")" statement
                   | "for" "(" expression ";"            ";" expression ")" statement
                   | "for" "("            ";" expression ";" expression ")" statement
                   | "for" "(" expression ";"            ";"            ")" statement
                   | "for" "("            ";" expression ";"            ")" statement
                   | "for" "("            ";"            ";" expression ")" statement
                   | "for" "("            ";"            ";"            ")" statement;

jump_statement: "goto" TK_IDENT+token ";"
              | "continue" ";"
              | "break" ";"
              | "return" expression ";"
              | "return"            ";";

// Extternal definitions
translation_unit: external_declaration
                | translation_unit external_declaration;

external_declaration: function_definition
                    | declaration;

function_definition: declaration_specifiers declarator declaration_list compound_statement
                   | declaration_specifiers declarator                  compound_statement;

declaration_list: declaration
                | declaration_list declaration;
